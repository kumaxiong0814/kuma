/**
 * 处理固定长度文件，并检查空值，返回空值字段
 */
public static void processFixedLengthFile(File inputFile, String outputFile, String[][] fieldDefinitions) throws IOException {
    try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
         BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {

        // 写入 CSV 表头
        List<String> headers = new ArrayList<>();
        for (String[] field : fieldDefinitions) {
            headers.add(field[0]);
        }
        headers.add("Empty_Check"); // 增加空值检查列
        writer.write(String.join(",", headers));
        writer.newLine();

        // 逐行解析并写入
        String line;
        while ((line = reader.readLine()) != null) {
            List<String> values = new ArrayList<>();
            List<String> emptyFields = new ArrayList<>();  // 用于保存空字段的名称
            int start = 0;

            for (String[] field : fieldDefinitions) {
                int length = Integer.parseInt(field[1]);
                String value = line.substring(start, Math.min(start + length, line.length())).trim();
                values.add(value);
                start += length;

                // 如果字段为空，记录字段名称
                if (value.isEmpty()) {
                    emptyFields.add(field[0]);
                }
            }

            // 在最后一列添加空值字段信息
            if (!emptyFields.isEmpty()) {
                values.add(String.join(";", emptyFields)); // 如果有空字段，列出空字段名称
            } else {
                values.add("No Empty Fields");
            }

            writer.write(String.join(",", values));
            writer.newLine();
        }
    }
}

/**
 * 处理可变长度文件，并检查空值，返回空值字段
 */
public static void processVariableLengthFile(File inputFile, String outputFile, String[][] fieldDefinitions) throws IOException {
    try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
         BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {

        // 写入 CSV 表头
        List<String> headers = new ArrayList<>();
        for (String[] field : fieldDefinitions) {
            headers.add(field[0]);
        }
        headers.add("Empty_Check");  // 添加空值检查字段
        writer.write(String.join(",", headers));
        writer.newLine();

        // 逐行解析并写入
        String line;

        while ((line = reader.readLine()) != null) {
            String[] fields = line.split("\\|");  // 可变长度字段分隔符
            List<String> fieldList = new ArrayList<>();
            List<String> emptyFields = new ArrayList<>();  // 用于保存空字段的名称

            // 遍历字段，检查是否为空
            for (int i = 0; i < fields.length; i++) {
                String field = fields[i].trim();
                fieldList.add(field);

                if (field.isEmpty()) {
                    // 获取字段名称，如果为空字段，记录其名称
                    emptyFields.add(fieldDefinitions[i][0]);
                }
            }

            // 如果有空字段，则在行末尾加上空字段信息
            if (!emptyFields.isEmpty()) {
                fieldList.add(String.join(";", emptyFields)); // 列出所有空字段
            } else {
                fieldList.add("No Empty Fields");
            }

            writer.write(String.join(",", fieldList));
            writer.newLine();
        }
    }
}